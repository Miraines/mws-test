// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateCat implements createCat operation.
	//
	// Creates a new cat and returns its complete representation.
	//
	// POST /cats
	CreateCat(ctx context.Context, req *NewCat) (*Cat, error)
	// DeleteCat implements deleteCat operation.
	//
	// Deletes a cat by ID. Returns `204 No Content' if deletion was successful.
	//
	// DELETE /cats/{id}
	DeleteCat(ctx context.Context, params DeleteCatParams) (DeleteCatRes, error)
	// GetCat implements getCat operation.
	//
	// Finds a cat by ID and returns it.
	//
	// GET /cats/{id}
	GetCat(ctx context.Context, params GetCatParams) (GetCatRes, error)
	// ListCats implements listCats operation.
	//
	// Returns the full list of cats stored in the service's memory.
	//
	// GET /cats
	ListCats(ctx context.Context) ([]Cat, error)
	// UpdateCat implements updateCat operation.
	//
	// Updates the data of the cat by ID and returns the updated record.
	//
	// PUT /cats/{id}
	UpdateCat(ctx context.Context, req *UpdateCat, params UpdateCatParams) (UpdateCatRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
